    Chapter 1: Bash basics: why Bash is so good, building blocks, first guidelines on developing good scripts.
    Chapter 2: Script basics: writing and debugging.
    Chapter 3: The Bash Environment: initialization files, variables, quoting characters, shell expansion order, aliases, options.
    Chapter 4: Regular expressions: an introduction.
    Chapter 5: Sed: an introduction to the sed line editor.
    Chapter 6:Awk: introduction to the awk programming language.
    Chapter 7: Conditional statements: constructs used in Bash to test conditions.
    Chapter 8: Interactive scripts: making scripts user-friendly, catching user input.
    Chapter 9: Executing commands repetitively: constructs used in Bash to automate command execution.
    Chapter 10: Advanced variables: specifying variable types, introduction to arrays of variables, operations on variables.
    Chapter 11: Functions: an introduction.
    Chapter 12: Catching signals: introduction to process signalling, trapping user-sent signals.


Chapter 1: Bash and Bash scripts

In this module we:
- Describe some common shells
- Point out GNU Bash advantages and features
- Describe the shell's building blocks
- Discuss Bash initialization files
- See how the shell executes commands
- Look into some simple script examples

The UNIX/Linux shell program interprets user commands, which are either directly entered by the user, or which 
can be read from a file called the shel script or shell program.

Shell scripts are interpreted, not compiled. The shell reads commands from the script like per line and searches for those commands on the system, while a compiler converts a program into machine readable form, an executable file - which may then be used in a shell script.

Apart from passing commands to the kernel, the main task of a shell is providing a user environment, which can be configured individually using shell resource configuration files. 

