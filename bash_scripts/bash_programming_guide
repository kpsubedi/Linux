[Introduction]

The shell is a command interpreter. We can say alternatively layer between 
user and kernel. It also very powerful language, called shell scripting.
It provides an easy-to-use tool for building applications by "gluing together"
system calls,,
tools,
utilities, and 
compiled binaries.

Bash script contains available linux commands, loops,
control statements, conditions etc.

[Example 1]

Create a script using your favorite editor such as vim, pico, emacs, etc.

Try to give .sh extension to your scripts. This is not required but be 
easy to read.

[Execute]

To execute your script
$bash <your_script>.sh
or 
$chmod +x <your_script>.sh
$./<your_script>.sh


[Shell types]
There are different types of shells out there.
For example,
To check available shells in your OS
$cat /etc/shells

Try different shells

$dash
$sh

After entering above two commands you logged into two different shells.
To logout press CTRL+D twice because you shelled to twice.

Check your shell

$whoami

This command shows your usename logged into the system.
I am goint to store output of this command to variable.

$user_name=`whoami` 

Note: ` ` : This is quote you will get from tilde key.
Donot put space between your variable and linux command.

Accessing the variable:

$echo $user_name

$cat /etc/passwd | grep $user_name

Your will see single line from /etc/passwd file matches with your user name.

/etc/passwd is separated by color ":". 
The last field is your shell name.




[Parameters]
Positional Parameters: 
$1 $2 $3 $4 $5 $6 $7 $8 $9 ${10} ${11}...
Special Parameters:
$* $@ $# $- $$ $0 $! $? $_

Variables 
nam=string
For variable assignment, "=" must not have adjacent spaces.



[Maths]
echo $((3+4))


[Brace Expansion]
Arbitrary Word Generation

String generation:
prefix{ab,cd,ef}suffix

Sequence generation:
prefix{x..y}suffix

Sequencing by specified increment:
prefix{x..y..incr}suffix

Brace expansion may be nested and combined.

The prefix and suffix are optional.

[Functions]


Example: Find file size greater than 200k.

find . -size +200k -exec ls -lh {} \;


[Hex Editor]
$ hexdump  -C  -s  0x700  -n 8 <file>

-s: skip 0x700 bytes
-n: number of bytes

